Este es un repositorio para aprender a usar git y github.
---------------------------------------------------BÁSICO-----------------------------------------------------------------------------------------------------------------
    *Para indicar que esta carpeta es un repositorio que tiene que ser gestionado por git, basta con escribir "git init" en una terminal en la carpeta.
*Si quiero que deje de estar gestionado por git, basta con eliminar la carpeta oculta llamada ".git".
*Con "git status" puedo ver cuales son los archivos a los que git está haciendo un control de cambios.
*Con "git add .", "git add -A" ó "git add --all" agrego todos los archivos a la zona conocida como stage, que es una zona donde están los archivos listos para ser confirmados. En vez del punto puedo poner el nombre del archivo que quiero agregar, para agregar solo ese archivo.
*Con "git commit" agrego y confirmo los archivos. Agregando -m puedo poner un mensaje entre comillas.
*Con "git diff" puedo ver cuales han sido las modificaciones en los archivos respecto al último commit.
*Con "git log" puedo ver la lista de cambions realizados, ordenados del más reciente al más antiguo.
*Con "git reset <nombre directorio>" puedo quitar el directorio especificado del stage.
*Evidentemente con "git help" puedo ver mas información sobre los comandos.
*Con "git config --global alias.<abreviación> "<comando a abreviar>"" puedo agregar un comando mas corto o con un nombre más amigable, que haga lo mismo que el comando escrito entre comillas, es decir, le doy un apodo o alias a un comando.
*Con "git commit --amend" se puede cambiar el mensaje del último commit.
*Con "git mv <Nombre archivo> <Nuevo nombre>" puedo renombrar un archivo de la carpeta.
*Con "git rm <Nombre archivo>" se puede borrar el archivo mencionado. 
*Con "git reset --soft <id del commit>" se vuelve al commit del id indicado, pero no deshace los cambios hechos. 
*Con "git reset --hard <id del commit>" se vuelve al commit del id indicado y se deshacen los cambios posteriores a ese commit.
*Con "git reset --mixed <id del commit>" se vuelve al commit del id indicado pero no se deshacen los cambios en los archivos, es decir los archivos no se modifican pero sus cambios posteriores al commit indicado se mantienen fuera del stage.
*Con "git reflog" puedo ver todos los commits, incluso los eliminados y los modificados.
*Con el listado dado por "git reflog" puedo acceder al id de cualquier commit,y usando "git reset --hard <id del commit>" puedo moverme al commit que quiera y deshacer todos los cambios posteriores o rehacer todos los cambios anteriores, dependiendo de cual commit a cual me mueva.
*Si se desea que algún archivo o carpeta cuyos cambios sean ignorados por git, se puede crear un archivo llamado ".git ignore" y dentro de el escribir los archivos a ser ingnorados. Se puede usar un asterisco(*) al final de un nombre y se ignorarán todos los archivos que comiencen con ese nombre, para no escrbirlos a todos. En github, existe un repositorio con los archivos .gitignore convenientes para cada lenguaje de programación. ---> https://github.com/github/gitignore
---------------------------------------------------RAMAS-----------------------------------------------------------------------------------------------------------
Se pueden crear nuevas ramas del proyecto para separar las modificaciones a partir de cierto punto y trabajar por separado, o asegurar una rama en la que el funcionamiento es correcto, etcétera. Luego, las ramas se pueden fusionar nuevamente.
*Con "git branch <nombre de la nueva rama>" se puede crear una nueva rama, que tendrá el progreso realizado hasta el último commit realizado. Con "git log --oneline --decorate --all --graph" se puede ver donde está el head y donde está cada rama.
*Con "git checkout <nombre de la rama>" podemos movernos a la rama cuyo nombre fue especificado.
*Para combinar las ramas, hay que dirigirse a la rama principal, o la que se quiere que siga existiendo, y hacer "git merge <rama a fusionar con la actual>"
