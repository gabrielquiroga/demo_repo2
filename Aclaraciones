Este es un repositorio para aprender a usar git y github.
---------------------------------------------------BÁSICO-----------------------------------------------------------------------------------------------------------------
*Para indicar que esta carpeta es un repositorio que tiene que ser gestionado por git, basta con escribir "git init" en una terminal en la carpeta.
*Si quiero que deje de estar gestionado por git, basta con eliminar la carpeta oculta llamada ".git".
*Con "git status" puedo ver cuales son los archivos a los que git está haciendo un control de cambios.
*Con "git add .", "git add -A" ó "git add --all" agrego todos los archivos a la zona conocida como stage, que es una zona donde están los archivos listos para ser confirmados. En vez del punto puedo poner el nombre del archivo que quiero agregar, para agregar solo ese archivo.
*Con "git commit" agrego y confirmo los archivos. Agregando -m puedo poner un mensaje entre comillas.
*Con "git diff" puedo ver cuales han sido las modificaciones en los archivos respecto al último commit.
*Con "git log" puedo ver la lista de cambions realizados, ordenados del más reciente al más antiguo.
*Con "git reset <nombre directorio>" puedo quitar el directorio especificado del stage.
*Evidentemente con "git help" puedo ver mas información sobre los comandos.
*Con "git config --global alias.<abreviación> "<comando a abreviar>"" puedo agregar un comando mas corto o con un nombre más amigable, que haga lo mismo que el comando escrito entre comillas, es decir, le doy un apodo o alias a un comando.
*Con "git commit --amend" se puede cambiar el mensaje del último commit.
*Con "git mv <Nombre archivo> <Nuevo nombre>" puedo renombrar un archivo de la carpeta.
*Con "git rm <Nombre archivo>" se puede borrar el archivo mencionado. 
*Con "git reset --soft <id del commit>" se vuelve al commit del id indicado, pero no deshace los cambios hechos. 
*Con "git reset --hard <id del commit>" se vuelve al commit del id indicado y se deshacen los cambios posteriores a ese commit.
*Con "git reset --mixed <id del commit>" se vuelve al commit del id indicado pero no se deshacen los cambios en los archivos, es decir los archivos no se modifican pero sus cambios posteriores al commit indicado se mantienen fuera del stage.
*Con "git reflog" puedo ver todos los commits, incluso los eliminados y los modificados.
*Con el listado dado por "git reflog" puedo acceder al id de cualquier commit,y usando "git reset --hard <id del commit>" puedo moverme al commit que quiera y deshacer todos los cambios posteriores o rehacer todos los cambios anteriores, dependiendo de cual commit a cual me mueva.
*Si se desea que algún archivo o carpeta cuyos cambios sean ignorados por git, se puede crear un archivo llamado ".git ignore" y dentro de el escribir los archivos a ser ingnorados. Se puede usar un asterisco(*) al final de un nombre y se ignorarán todos los archivos que comiencen con ese nombre, para no escrbirlos a todos. En github, existe un repositorio con los archivos .gitignore convenientes para cada lenguaje de programación. ---> https://github.com/github/gitignore
---------------------------------------------------RAMAS------------------------------------------------------------------------------------------------------------------
Se pueden crear nuevas ramas del proyecto para separar las modificaciones a partir de cierto punto y trabajar por separado, o asegurar una rama en la que el funcionamiento es correcto, etcétera. Luego, las ramas se pueden fusionar nuevamente.
*Con "git branch <nombre de la nueva rama>" se puede crear una nueva rama, que tendrá el progreso realizado hasta el último commit realizado. Con "git log --oneline --decorate --all --graph" se puede ver donde está el head y donde está cada rama.
*Con "git checkout <nombre de la rama>" podemos movernos a la rama cuyo nombre fue especificado. Se puede crear una rama y dirigirse inmediatamente a ella con un solo comando "git checkout -b <nombre de la nueva rama>.
*Para combinar las ramas, hay que dirigirse a la rama principal, o la que se quiere que siga existiendo, y hacer "git merge <rama a fusionar con la actual>". Luego de hacer el merge, no es necesario tener la rama que se había creado (a menos que se vaya a seguir modificando) sporque ya está integrada con la principal, por lo que es conveniente eliminarla utilizando el comando "git branch -d <nombre de la rama a borrar>". También se puede utilizar este último comando para borrar una rama con algo que no funciona o que no fue útil.
*Puede pasar que al querer mergear dos ramas, éstas tengan modificadas las mismas partes, por lo que aparecerán conflictos que serán notifficados al hacer "git merge <rama>". Lo que se debe hacer es abrir el archivo en conflicto (al fallar en hacer el merge nos dice cuál es) con un editor de texto y veremos que aparece mostrado como es la parte de cada rama, ahí hay que modificar manualmente como queremos que quede el archivo final. Luego de hacer esto, no es necesario volver a intentar un merge, porque la combinación ya fue hecha manualmente.
---------------------------------------------------ETIQUETAS--------------------------------------------------------------------------------------------------------------
*Con "git tag <Nombre de la etiqueta>" puedo agregarle una etiqueta al último commit de la rama en la que estoy trabajando, para darle un nombre o número de versión al proyecto hasta ese momento. Puedo borrar la etiqueta posteriormente con "git tag -d <Nombre de la etiqueta>".
*Con "git tag -a <Nombre de la etiqueta> -m "Mensaje o desccripción"" se puede agregar un mensaje en la versión etiquetada. Para darle una etiqueta a otro commit que no sea el último de la rama puedo hacer "git tag -a <Nombre de la etiqueta> <id del commit> -m "Descripción"", usando el id que se puede obtener del "git log --oneline".
---------------------------------------------------GITHUB-----------------------------------------------------------------------------------------------------------------
GitHub se puede usar para alojar los repositorios de forma de remote, es decir, quedan guardados en Internet y al alcance de cualquier usuario. Para agregar el repositorio en el que estamos a trabajando hay que hacer "git remote add <Nombre remoto> https://github.com/<Usuario de github>/<Nombre del repositorio>.git". Se suele usar 'origin' como nombre remoto, y un ejemplo en mi caso sería "git remote add origin https://github.com/gabrielquiroga/demo_repo.git". Luego, se debe usar "git push -u <Nombre remoto> <Rama a exportar>" para exportar hasta el último commit de esa rama al repositorio remoto en github.
*Para copiar un repositorio remoto en nuestra propia máquina se debe hacer "git clone https://github.com/<Usuario creador>/<Nombre del repo>.git". Luego, podemos modificar este repositorio, hacer un "git add .", un "git commit" y un "git push <Nombre remoto> <Rama>" para subir los cambios al repositorio que está en github.
*Si existe un cambio en el repositoriode github pero que no lo tenemos en nuestro repositorio de la computadora, al hacer un "git status" no se va a ver esta diferencia. Por lo que hay que traer los cambios con otro comando. Las opciones para hacer esto son "git fetch" y "git pull". Con "git fetch" se pueden traer los cambios pero luego habría que hacer un merge, a diferencia de con "git pull" que directamente se agregan los cambios al master.
*En github, puedo meterme en cualquier archivo y ver los cambios en los que ha sido afectado y en que commit fueron, así puedo meterme en cualquier commit, ver otros archivos en ese momento, entre muchas acciones más.
*Si encontramos un repositorio en github que nos resulta útil o interesante y queremos tener una copia de este en nuestro repositorio poder modificarlo y usarlo, github nos da la opción de hacer un fork, que realiza esta misma opción. Luego, puedo crear una carpeta en mi computadora y hacer un "git clone <url>" para tener el repositorio a mi disposición. Básicamente, esto lo podemos lograr con solo "git clone", pero al hacer el fork, podemos subir los cambios a nuestro github.
*Si en el repositorio ajeno que clonamos, hicimos algún cambio útil o copado y queremos que el dueño del repositorio original se fije si le gusta el cambio y lo quiere agregar, tenemos que hacer un pull request. Esta opción nos la proporciona la interfaz de github con acciones, tanto como para quien quiera modificar y quien sea el autor original del repositorio, para que sea sencillo hacer la modificación.
-------------------------------------------------INTEGRACIÓN-CON-VSCode---------------------------------------------------------------------------------------------------
*VSCode viene con una terminal integrada, por lo que se puede clonar un repositorio de github directamente desde esta, modificar lo que queramos con el editor de texto, y aplicar los comandos de git necesarios en la misma terminal también. Luego, podemos acceder a la carpeta del repositorio clonado y con el comando "code ." se abre una nueva ventana dedicada a este proyecto.
